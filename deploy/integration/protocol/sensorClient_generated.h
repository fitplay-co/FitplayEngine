// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SENSORCLIENT_SENSOR_H_
#define FLATBUFFERS_GENERATED_SENSORCLIENT_SENSOR_H_

#include "flatbuffers/flatbuffers.h"

namespace Sensor {

struct SensorClient;
struct SensorClientBuilder;

struct SensorClient FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SensorClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENSORTYPE = 4,
    VT_SENSORID = 6,
    VT_SENSORINFO = 8
  };
  const flatbuffers::String *sensorType() const {
    return GetPointer<const flatbuffers::String *>(VT_SENSORTYPE);
  }
  const flatbuffers::String *sensorId() const {
    return GetPointer<const flatbuffers::String *>(VT_SENSORID);
  }
  const flatbuffers::String *sensorInfo() const {
    return GetPointer<const flatbuffers::String *>(VT_SENSORINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENSORTYPE) &&
           verifier.VerifyString(sensorType()) &&
           VerifyOffset(verifier, VT_SENSORID) &&
           verifier.VerifyString(sensorId()) &&
           VerifyOffset(verifier, VT_SENSORINFO) &&
           verifier.VerifyString(sensorInfo()) &&
           verifier.EndTable();
  }
};

struct SensorClientBuilder {
  typedef SensorClient Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sensorType(flatbuffers::Offset<flatbuffers::String> sensorType) {
    fbb_.AddOffset(SensorClient::VT_SENSORTYPE, sensorType);
  }
  void add_sensorId(flatbuffers::Offset<flatbuffers::String> sensorId) {
    fbb_.AddOffset(SensorClient::VT_SENSORID, sensorId);
  }
  void add_sensorInfo(flatbuffers::Offset<flatbuffers::String> sensorInfo) {
    fbb_.AddOffset(SensorClient::VT_SENSORINFO, sensorInfo);
  }
  explicit SensorClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SensorClient> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SensorClient>(end);
    return o;
  }
};

inline flatbuffers::Offset<SensorClient> CreateSensorClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sensorType = 0,
    flatbuffers::Offset<flatbuffers::String> sensorId = 0,
    flatbuffers::Offset<flatbuffers::String> sensorInfo = 0) {
  SensorClientBuilder builder_(_fbb);
  builder_.add_sensorInfo(sensorInfo);
  builder_.add_sensorId(sensorId);
  builder_.add_sensorType(sensorType);
  return builder_.Finish();
}

inline flatbuffers::Offset<SensorClient> CreateSensorClientDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sensorType = nullptr,
    const char *sensorId = nullptr,
    const char *sensorInfo = nullptr) {
  auto sensorType__ = sensorType ? _fbb.CreateString(sensorType) : 0;
  auto sensorId__ = sensorId ? _fbb.CreateString(sensorId) : 0;
  auto sensorInfo__ = sensorInfo ? _fbb.CreateString(sensorInfo) : 0;
  return Sensor::CreateSensorClient(
      _fbb,
      sensorType__,
      sensorId__,
      sensorInfo__);
}

inline const Sensor::SensorClient *GetSensorClient(const void *buf) {
  return flatbuffers::GetRoot<Sensor::SensorClient>(buf);
}

inline const Sensor::SensorClient *GetSizePrefixedSensorClient(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Sensor::SensorClient>(buf);
}

inline bool VerifySensorClientBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sensor::SensorClient>(nullptr);
}

inline bool VerifySizePrefixedSensorClientBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sensor::SensorClient>(nullptr);
}

inline void FinishSensorClientBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sensor::SensorClient> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSensorClientBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sensor::SensorClient> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Sensor

#endif  // FLATBUFFERS_GENERATED_SENSORCLIENT_SENSOR_H_
