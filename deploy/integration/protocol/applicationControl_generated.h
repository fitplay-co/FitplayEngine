// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_APPLICATIONCONTROL_APPLICATIONCONTROL_H_
#define FLATBUFFERS_GENERATED_APPLICATIONCONTROL_APPLICATIONCONTROL_H_

#include "flatbuffers/flatbuffers.h"

namespace ApplicationControl {

struct Control;
struct ControlBuilder;

struct ControlData;
struct ControlDataBuilder;

struct Control FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ControlBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FEATUREID = 4,
    VT_ACTION = 6,
    VT_DATA = 8
  };
  const flatbuffers::String *featureId() const {
    return GetPointer<const flatbuffers::String *>(VT_FEATUREID);
  }
  const flatbuffers::String *action() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION);
  }
  const ApplicationControl::ControlData *data() const {
    return GetPointer<const ApplicationControl::ControlData *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FEATUREID) &&
           verifier.VerifyString(featureId()) &&
           VerifyOffset(verifier, VT_ACTION) &&
           verifier.VerifyString(action()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct ControlBuilder {
  typedef Control Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_featureId(flatbuffers::Offset<flatbuffers::String> featureId) {
    fbb_.AddOffset(Control::VT_FEATUREID, featureId);
  }
  void add_action(flatbuffers::Offset<flatbuffers::String> action) {
    fbb_.AddOffset(Control::VT_ACTION, action);
  }
  void add_data(flatbuffers::Offset<ApplicationControl::ControlData> data) {
    fbb_.AddOffset(Control::VT_DATA, data);
  }
  explicit ControlBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Control> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Control>(end);
    return o;
  }
};

inline flatbuffers::Offset<Control> CreateControl(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> featureId = 0,
    flatbuffers::Offset<flatbuffers::String> action = 0,
    flatbuffers::Offset<ApplicationControl::ControlData> data = 0) {
  ControlBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_action(action);
  builder_.add_featureId(featureId);
  return builder_.Finish();
}

inline flatbuffers::Offset<Control> CreateControlDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *featureId = nullptr,
    const char *action = nullptr,
    flatbuffers::Offset<ApplicationControl::ControlData> data = 0) {
  auto featureId__ = featureId ? _fbb.CreateString(featureId) : 0;
  auto action__ = action ? _fbb.CreateString(action) : 0;
  return ApplicationControl::CreateControl(
      _fbb,
      featureId__,
      action__,
      data);
}

struct ControlData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ControlDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FPS = 4,
    VT_HEIGHT = 6
  };
  int32_t fps() const {
    return GetField<int32_t>(VT_FPS, 0);
  }
  float height() const {
    return GetField<float>(VT_HEIGHT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FPS, 4) &&
           VerifyField<float>(verifier, VT_HEIGHT, 4) &&
           verifier.EndTable();
  }
};

struct ControlDataBuilder {
  typedef ControlData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fps(int32_t fps) {
    fbb_.AddElement<int32_t>(ControlData::VT_FPS, fps, 0);
  }
  void add_height(float height) {
    fbb_.AddElement<float>(ControlData::VT_HEIGHT, height, 0.0f);
  }
  explicit ControlDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ControlData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlData> CreateControlData(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t fps = 0,
    float height = 0.0f) {
  ControlDataBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_fps(fps);
  return builder_.Finish();
}

inline const ApplicationControl::Control *GetControl(const void *buf) {
  return flatbuffers::GetRoot<ApplicationControl::Control>(buf);
}

inline const ApplicationControl::Control *GetSizePrefixedControl(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ApplicationControl::Control>(buf);
}

inline bool VerifyControlBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ApplicationControl::Control>(nullptr);
}

inline bool VerifySizePrefixedControlBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ApplicationControl::Control>(nullptr);
}

inline void FinishControlBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ApplicationControl::Control> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedControlBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ApplicationControl::Control> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ApplicationControl

#endif  // FLATBUFFERS_GENERATED_APPLICATIONCONTROL_APPLICATIONCONTROL_H_
