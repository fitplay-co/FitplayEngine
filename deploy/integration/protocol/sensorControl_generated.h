// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SENSORCONTROL_SENSOR_H_
#define FLATBUFFERS_GENERATED_SENSORCONTROL_SENSOR_H_

#include "flatbuffers/flatbuffers.h"

namespace Sensor {

struct SensorControl;
struct SensorControlBuilder;

struct SensorControl FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SensorControlBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENSORTYPE = 4,
    VT_SENSORID = 6
  };
  const flatbuffers::String *sensorType() const {
    return GetPointer<const flatbuffers::String *>(VT_SENSORTYPE);
  }
  const flatbuffers::String *sensorId() const {
    return GetPointer<const flatbuffers::String *>(VT_SENSORID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENSORTYPE) &&
           verifier.VerifyString(sensorType()) &&
           VerifyOffset(verifier, VT_SENSORID) &&
           verifier.VerifyString(sensorId()) &&
           verifier.EndTable();
  }
};

struct SensorControlBuilder {
  typedef SensorControl Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sensorType(flatbuffers::Offset<flatbuffers::String> sensorType) {
    fbb_.AddOffset(SensorControl::VT_SENSORTYPE, sensorType);
  }
  void add_sensorId(flatbuffers::Offset<flatbuffers::String> sensorId) {
    fbb_.AddOffset(SensorControl::VT_SENSORID, sensorId);
  }
  explicit SensorControlBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SensorControl> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SensorControl>(end);
    return o;
  }
};

inline flatbuffers::Offset<SensorControl> CreateSensorControl(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sensorType = 0,
    flatbuffers::Offset<flatbuffers::String> sensorId = 0) {
  SensorControlBuilder builder_(_fbb);
  builder_.add_sensorId(sensorId);
  builder_.add_sensorType(sensorType);
  return builder_.Finish();
}

inline flatbuffers::Offset<SensorControl> CreateSensorControlDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sensorType = nullptr,
    const char *sensorId = nullptr) {
  auto sensorType__ = sensorType ? _fbb.CreateString(sensorType) : 0;
  auto sensorId__ = sensorId ? _fbb.CreateString(sensorId) : 0;
  return Sensor::CreateSensorControl(
      _fbb,
      sensorType__,
      sensorId__);
}

inline const Sensor::SensorControl *GetSensorControl(const void *buf) {
  return flatbuffers::GetRoot<Sensor::SensorControl>(buf);
}

inline const Sensor::SensorControl *GetSizePrefixedSensorControl(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Sensor::SensorControl>(buf);
}

inline bool VerifySensorControlBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sensor::SensorControl>(nullptr);
}

inline bool VerifySizePrefixedSensorControlBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sensor::SensorControl>(nullptr);
}

inline void FinishSensorControlBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sensor::SensorControl> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSensorControlBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sensor::SensorControl> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Sensor

#endif  // FLATBUFFERS_GENERATED_SENSORCONTROL_SENSOR_H_
