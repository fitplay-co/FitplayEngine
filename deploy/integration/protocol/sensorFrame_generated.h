// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SENSORFRAME_SENSOR_H_
#define FLATBUFFERS_GENERATED_SENSORFRAME_SENSOR_H_

#include "flatbuffers/flatbuffers.h"

#include "imuData_generated.h"

namespace Sensor {

struct SensorFrame;
struct SensorFrameBuilder;

struct SensorFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SensorFrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENSORTYPE = 4,
    VT_SENSORID = 6,
    VT_VERSION = 8,
    VT_IMU = 10
  };
  const flatbuffers::String *sensorType() const {
    return GetPointer<const flatbuffers::String *>(VT_SENSORTYPE);
  }
  const flatbuffers::String *sensorId() const {
    return GetPointer<const flatbuffers::String *>(VT_SENSORID);
  }
  const flatbuffers::String *version() const {
    return GetPointer<const flatbuffers::String *>(VT_VERSION);
  }
  const ImuData::Imu *imu() const {
    return GetPointer<const ImuData::Imu *>(VT_IMU);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENSORTYPE) &&
           verifier.VerifyString(sensorType()) &&
           VerifyOffset(verifier, VT_SENSORID) &&
           verifier.VerifyString(sensorId()) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_IMU) &&
           verifier.VerifyTable(imu()) &&
           verifier.EndTable();
  }
};

struct SensorFrameBuilder {
  typedef SensorFrame Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sensorType(flatbuffers::Offset<flatbuffers::String> sensorType) {
    fbb_.AddOffset(SensorFrame::VT_SENSORTYPE, sensorType);
  }
  void add_sensorId(flatbuffers::Offset<flatbuffers::String> sensorId) {
    fbb_.AddOffset(SensorFrame::VT_SENSORID, sensorId);
  }
  void add_version(flatbuffers::Offset<flatbuffers::String> version) {
    fbb_.AddOffset(SensorFrame::VT_VERSION, version);
  }
  void add_imu(flatbuffers::Offset<ImuData::Imu> imu) {
    fbb_.AddOffset(SensorFrame::VT_IMU, imu);
  }
  explicit SensorFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SensorFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SensorFrame>(end);
    return o;
  }
};

inline flatbuffers::Offset<SensorFrame> CreateSensorFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> sensorType = 0,
    flatbuffers::Offset<flatbuffers::String> sensorId = 0,
    flatbuffers::Offset<flatbuffers::String> version = 0,
    flatbuffers::Offset<ImuData::Imu> imu = 0) {
  SensorFrameBuilder builder_(_fbb);
  builder_.add_imu(imu);
  builder_.add_version(version);
  builder_.add_sensorId(sensorId);
  builder_.add_sensorType(sensorType);
  return builder_.Finish();
}

inline flatbuffers::Offset<SensorFrame> CreateSensorFrameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *sensorType = nullptr,
    const char *sensorId = nullptr,
    const char *version = nullptr,
    flatbuffers::Offset<ImuData::Imu> imu = 0) {
  auto sensorType__ = sensorType ? _fbb.CreateString(sensorType) : 0;
  auto sensorId__ = sensorId ? _fbb.CreateString(sensorId) : 0;
  auto version__ = version ? _fbb.CreateString(version) : 0;
  return Sensor::CreateSensorFrame(
      _fbb,
      sensorType__,
      sensorId__,
      version__,
      imu);
}

inline const Sensor::SensorFrame *GetSensorFrame(const void *buf) {
  return flatbuffers::GetRoot<Sensor::SensorFrame>(buf);
}

inline const Sensor::SensorFrame *GetSizePrefixedSensorFrame(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Sensor::SensorFrame>(buf);
}

inline bool VerifySensorFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sensor::SensorFrame>(nullptr);
}

inline bool VerifySizePrefixedSensorFrameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sensor::SensorFrame>(nullptr);
}

inline void FinishSensorFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sensor::SensorFrame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSensorFrameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Sensor::SensorFrame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Sensor

#endif  // FLATBUFFERS_GENERATED_SENSORFRAME_SENSOR_H_
