// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INPUTMESSAGE_INPUT_H_
#define FLATBUFFERS_GENERATED_INPUTMESSAGE_INPUT_H_

#include "flatbuffers/flatbuffers.h"

#include "sensorClient_generated.h"
#include "sensorControl_generated.h"
#include "imuData_generated.h"
#include "applicationClient_generated.h"
#include "poseData_generated.h"
#include "sensorFrame_generated.h"
#include "applicationControl_generated.h"

namespace Input {

struct InputMessage;
struct InputMessageBuilder;

enum MessageType : int16_t {
  MessageType_None = 0,
  MessageType_ApplicationClient = 1,
  MessageType_ApplicationControl = 2,
  MessageType_Pose = 3,
  MessageType_SensorFrame = 4,
  MessageType_SensorClient = 5,
  MessageType_SensorControl = 6,
  MessageType_MIN = MessageType_None,
  MessageType_MAX = MessageType_SensorControl
};

inline const MessageType (&EnumValuesMessageType())[7] {
  static const MessageType values[] = {
    MessageType_None,
    MessageType_ApplicationClient,
    MessageType_ApplicationControl,
    MessageType_Pose,
    MessageType_SensorFrame,
    MessageType_SensorClient,
    MessageType_SensorControl
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[8] = {
    "None",
    "ApplicationClient",
    "ApplicationControl",
    "Pose",
    "SensorFrame",
    "SensorClient",
    "SensorControl",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (flatbuffers::IsOutRange(e, MessageType_None, MessageType_SensorControl)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

struct InputMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InputMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_TYPE = 6,
    VT_CLIENT = 8,
    VT_CONTROL = 10,
    VT_POSE = 12,
    VT_SENSORFRAME = 14,
    VT_SENSORCLIENT = 16,
    VT_SENSORCONTROL = 18
  };
  const flatbuffers::String *version() const {
    return GetPointer<const flatbuffers::String *>(VT_VERSION);
  }
  Input::MessageType type() const {
    return static_cast<Input::MessageType>(GetField<int16_t>(VT_TYPE, 0));
  }
  const ApplicationClient::Client *client() const {
    return GetPointer<const ApplicationClient::Client *>(VT_CLIENT);
  }
  const ApplicationControl::Control *control() const {
    return GetPointer<const ApplicationControl::Control *>(VT_CONTROL);
  }
  const PoseData::Pose *pose() const {
    return GetPointer<const PoseData::Pose *>(VT_POSE);
  }
  const Sensor::SensorFrame *sensorFrame() const {
    return GetPointer<const Sensor::SensorFrame *>(VT_SENSORFRAME);
  }
  const Sensor::SensorClient *sensorClient() const {
    return GetPointer<const Sensor::SensorClient *>(VT_SENSORCLIENT);
  }
  const Sensor::SensorControl *sensorControl() const {
    return GetPointer<const Sensor::SensorControl *>(VT_SENSORCONTROL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyField<int16_t>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_CLIENT) &&
           verifier.VerifyTable(client()) &&
           VerifyOffset(verifier, VT_CONTROL) &&
           verifier.VerifyTable(control()) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_SENSORFRAME) &&
           verifier.VerifyTable(sensorFrame()) &&
           VerifyOffset(verifier, VT_SENSORCLIENT) &&
           verifier.VerifyTable(sensorClient()) &&
           VerifyOffset(verifier, VT_SENSORCONTROL) &&
           verifier.VerifyTable(sensorControl()) &&
           verifier.EndTable();
  }
};

struct InputMessageBuilder {
  typedef InputMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(flatbuffers::Offset<flatbuffers::String> version) {
    fbb_.AddOffset(InputMessage::VT_VERSION, version);
  }
  void add_type(Input::MessageType type) {
    fbb_.AddElement<int16_t>(InputMessage::VT_TYPE, static_cast<int16_t>(type), 0);
  }
  void add_client(flatbuffers::Offset<ApplicationClient::Client> client) {
    fbb_.AddOffset(InputMessage::VT_CLIENT, client);
  }
  void add_control(flatbuffers::Offset<ApplicationControl::Control> control) {
    fbb_.AddOffset(InputMessage::VT_CONTROL, control);
  }
  void add_pose(flatbuffers::Offset<PoseData::Pose> pose) {
    fbb_.AddOffset(InputMessage::VT_POSE, pose);
  }
  void add_sensorFrame(flatbuffers::Offset<Sensor::SensorFrame> sensorFrame) {
    fbb_.AddOffset(InputMessage::VT_SENSORFRAME, sensorFrame);
  }
  void add_sensorClient(flatbuffers::Offset<Sensor::SensorClient> sensorClient) {
    fbb_.AddOffset(InputMessage::VT_SENSORCLIENT, sensorClient);
  }
  void add_sensorControl(flatbuffers::Offset<Sensor::SensorControl> sensorControl) {
    fbb_.AddOffset(InputMessage::VT_SENSORCONTROL, sensorControl);
  }
  explicit InputMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<InputMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InputMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<InputMessage> CreateInputMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> version = 0,
    Input::MessageType type = Input::MessageType_None,
    flatbuffers::Offset<ApplicationClient::Client> client = 0,
    flatbuffers::Offset<ApplicationControl::Control> control = 0,
    flatbuffers::Offset<PoseData::Pose> pose = 0,
    flatbuffers::Offset<Sensor::SensorFrame> sensorFrame = 0,
    flatbuffers::Offset<Sensor::SensorClient> sensorClient = 0,
    flatbuffers::Offset<Sensor::SensorControl> sensorControl = 0) {
  InputMessageBuilder builder_(_fbb);
  builder_.add_sensorControl(sensorControl);
  builder_.add_sensorClient(sensorClient);
  builder_.add_sensorFrame(sensorFrame);
  builder_.add_pose(pose);
  builder_.add_control(control);
  builder_.add_client(client);
  builder_.add_version(version);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<InputMessage> CreateInputMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr,
    Input::MessageType type = Input::MessageType_None,
    flatbuffers::Offset<ApplicationClient::Client> client = 0,
    flatbuffers::Offset<ApplicationControl::Control> control = 0,
    flatbuffers::Offset<PoseData::Pose> pose = 0,
    flatbuffers::Offset<Sensor::SensorFrame> sensorFrame = 0,
    flatbuffers::Offset<Sensor::SensorClient> sensorClient = 0,
    flatbuffers::Offset<Sensor::SensorControl> sensorControl = 0) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  return Input::CreateInputMessage(
      _fbb,
      version__,
      type,
      client,
      control,
      pose,
      sensorFrame,
      sensorClient,
      sensorControl);
}

inline const Input::InputMessage *GetInputMessage(const void *buf) {
  return flatbuffers::GetRoot<Input::InputMessage>(buf);
}

inline const Input::InputMessage *GetSizePrefixedInputMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Input::InputMessage>(buf);
}

inline bool VerifyInputMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Input::InputMessage>(nullptr);
}

inline bool VerifySizePrefixedInputMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Input::InputMessage>(nullptr);
}

inline void FinishInputMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Input::InputMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInputMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Input::InputMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Input

#endif  // FLATBUFFERS_GENERATED_INPUTMESSAGE_INPUT_H_
