"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Joint = void 0;
var flatbuffers = require("../../../../app/src/wasm/flatbuffers/flatbuffers");
var Joint = /** @class */ (function () {
    function Joint() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Joint.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Joint.getRootAsJoint = function (bb, obj) {
        return (obj || new Joint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Joint.getSizePrefixedRootAsJoint = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Joint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Joint.prototype.w = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Joint.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Joint.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Joint.prototype.z = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Joint.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Joint.startJoint = function (builder) {
        builder.startObject(5);
    };
    Joint.addW = function (builder, w) {
        builder.addFieldFloat32(0, w, 0.0);
    };
    Joint.addX = function (builder, x) {
        builder.addFieldFloat32(1, x, 0.0);
    };
    Joint.addY = function (builder, y) {
        builder.addFieldFloat32(2, y, 0.0);
    };
    Joint.addZ = function (builder, z) {
        builder.addFieldFloat32(3, z, 0.0);
    };
    Joint.addName = function (builder, nameOffset) {
        builder.addFieldOffset(4, nameOffset, 0);
    };
    Joint.endJoint = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Joint.createJoint = function (builder, w, x, y, z, nameOffset) {
        Joint.startJoint(builder);
        Joint.addW(builder, w);
        Joint.addX(builder, x);
        Joint.addY(builder, y);
        Joint.addZ(builder, z);
        Joint.addName(builder, nameOffset);
        return Joint.endJoint(builder);
    };
    return Joint;
}());
exports.Joint = Joint;
