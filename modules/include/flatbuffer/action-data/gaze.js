"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Gaze = void 0;
var flatbuffers = require("/Users/nixiaofeng/develop/feature/os_dev_docker/app/src/wasm/flatbuffers/flatbuffers.js");
var Gaze = /** @class */ (function () {
    function Gaze() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Gaze.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Gaze.getRootAsGaze = function (bb, obj) {
        return (obj || new Gaze()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Gaze.getSizePrefixedRootAsGaze = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Gaze()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Gaze.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Gaze.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Gaze.prototype.z = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Gaze.startGaze = function (builder) {
        builder.startObject(3);
    };
    Gaze.addX = function (builder, x) {
        builder.addFieldFloat32(0, x, 0.0);
    };
    Gaze.addY = function (builder, y) {
        builder.addFieldFloat32(1, y, 0.0);
    };
    Gaze.addZ = function (builder, z) {
        builder.addFieldFloat32(2, z, 0.0);
    };
    Gaze.endGaze = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Gaze.createGaze = function (builder, x, y, z) {
        Gaze.startGaze(builder);
        Gaze.addX(builder, x);
        Gaze.addY(builder, y);
        Gaze.addZ(builder, z);
        return Gaze.endGaze(builder);
    };
    return Gaze;
}());
exports.Gaze = Gaze;
