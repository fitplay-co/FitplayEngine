// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Joint } from '../action-data/joint';


export class Fitting {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Fitting {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFitting(bb:flatbuffers.ByteBuffer, obj?:Fitting):Fitting {
  return (obj || new Fitting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFitting(bb:flatbuffers.ByteBuffer, obj?:Fitting):Fitting {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Fitting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rotation(index: number, obj?:Joint):Joint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Joint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rotationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mirrorRotation(index: number, obj?:Joint):Joint|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Joint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mirrorRotationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFitting(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rotationOffset, 0);
}

static createRotationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRotationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMirrorRotation(builder:flatbuffers.Builder, mirrorRotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mirrorRotationOffset, 0);
}

static createMirrorRotationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMirrorRotationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFitting(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFitting(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset, mirrorRotationOffset:flatbuffers.Offset):flatbuffers.Offset {
  Fitting.startFitting(builder);
  Fitting.addRotation(builder, rotationOffset);
  Fitting.addMirrorRotation(builder, mirrorRotationOffset);
  return Fitting.endFitting(builder);
}
}
