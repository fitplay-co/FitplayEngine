// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Jump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Jump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsJump(bb:flatbuffers.ByteBuffer, obj?:Jump):Jump {
  return (obj || new Jump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsJump(bb:flatbuffers.ByteBuffer, obj?:Jump):Jump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Jump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

up():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

strength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startJump(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUp(builder:flatbuffers.Builder, up:number) {
  builder.addFieldFloat32(0, up, 0.0);
}

static addStrength(builder:flatbuffers.Builder, strength:number) {
  builder.addFieldFloat32(1, strength, 0.0);
}

static endJump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createJump(builder:flatbuffers.Builder, up:number, strength:number):flatbuffers.Offset {
  Jump.startJump(builder);
  Jump.addUp(builder, up);
  Jump.addStrength(builder, strength);
  return Jump.endJump(builder);
}
}
