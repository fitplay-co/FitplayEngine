// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Squat {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Squat {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSquat(bb:flatbuffers.ByteBuffer, obj?:Squat):Squat {
  return (obj || new Squat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSquat(bb:flatbuffers.ByteBuffer, obj?:Squat):Squat {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Squat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

status():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSquat(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addStatus(builder:flatbuffers.Builder, status:number) {
  builder.addFieldFloat32(0, status, 0.0);
}

static endSquat(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSquat(builder:flatbuffers.Builder, status:number):flatbuffers.Offset {
  Squat.startSquat(builder);
  Squat.addStatus(builder, status);
  return Squat.endSquat(builder);
}
}
