"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Fitting = void 0;
var flatbuffers = require("../../../../app/src/wasm/flatbuffers/flatbuffers");
var joint_1 = require("../action-data/joint");
var Fitting = /** @class */ (function () {
    function Fitting() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Fitting.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Fitting.getRootAsFitting = function (bb, obj) {
        return (obj || new Fitting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Fitting.getSizePrefixedRootAsFitting = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Fitting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Fitting.prototype.rotation = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new joint_1.Joint()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Fitting.prototype.rotationLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Fitting.prototype.mirrorRotation = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new joint_1.Joint()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Fitting.prototype.mirrorRotationLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Fitting.startFitting = function (builder) {
        builder.startObject(2);
    };
    Fitting.addRotation = function (builder, rotationOffset) {
        builder.addFieldOffset(0, rotationOffset, 0);
    };
    Fitting.createRotationVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Fitting.startRotationVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Fitting.addMirrorRotation = function (builder, mirrorRotationOffset) {
        builder.addFieldOffset(1, mirrorRotationOffset, 0);
    };
    Fitting.createMirrorRotationVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Fitting.startMirrorRotationVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Fitting.endFitting = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Fitting.createFitting = function (builder, rotationOffset, mirrorRotationOffset) {
        Fitting.startFitting(builder);
        Fitting.addRotation(builder, rotationOffset);
        Fitting.addMirrorRotation(builder, mirrorRotationOffset);
        return Fitting.endFitting(builder);
    };
    return Fitting;
}());
exports.Fitting = Fitting;
