// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Ground {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Ground {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGround(bb:flatbuffers.ByteBuffer, obj?:Ground):Ground {
  return (obj || new Ground()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGround(bb:flatbuffers.ByteBuffer, obj?:Ground):Ground {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Ground()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

z():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

legLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

tracing():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startGround(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(0, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(1, y, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldFloat32(2, z, 0.0);
}

static addLegLength(builder:flatbuffers.Builder, legLength:number) {
  builder.addFieldFloat32(3, legLength, 0.0);
}

static addTracing(builder:flatbuffers.Builder, tracing:number) {
  builder.addFieldFloat32(4, tracing, 0.0);
}

static endGround(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGround(builder:flatbuffers.Builder, x:number, y:number, z:number, legLength:number, tracing:number):flatbuffers.Offset {
  Ground.startGround(builder);
  Ground.addX(builder, x);
  Ground.addY(builder, y);
  Ground.addZ(builder, z);
  Ground.addLegLength(builder, legLength);
  Ground.addTracing(builder, tracing);
  return Ground.endGround(builder);
}
}
