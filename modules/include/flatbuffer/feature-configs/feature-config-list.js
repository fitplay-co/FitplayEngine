"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.FeatureConfigList = void 0;
var flatbuffers = require("../../../../app/src/wasm/flatbuffers/flatbuffers");
var feature_config_1 = require("../feature-configs/feature-config");
var FeatureConfigList = /** @class */ (function () {
    function FeatureConfigList() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FeatureConfigList.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FeatureConfigList.getRootAsFeatureConfigList = function (bb, obj) {
        return (obj || new FeatureConfigList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FeatureConfigList.getSizePrefixedRootAsFeatureConfigList = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FeatureConfigList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FeatureConfigList.prototype.configs = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new feature_config_1.FeatureConfig()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FeatureConfigList.prototype.configsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    FeatureConfigList.startFeatureConfigList = function (builder) {
        builder.startObject(1);
    };
    FeatureConfigList.addConfigs = function (builder, configsOffset) {
        builder.addFieldOffset(0, configsOffset, 0);
    };
    FeatureConfigList.createConfigsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FeatureConfigList.startConfigsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FeatureConfigList.endFeatureConfigList = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FeatureConfigList.finishFeatureConfigListBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    FeatureConfigList.finishSizePrefixedFeatureConfigListBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    FeatureConfigList.createFeatureConfigList = function (builder, configsOffset) {
        FeatureConfigList.startFeatureConfigList(builder);
        FeatureConfigList.addConfigs(builder, configsOffset);
        return FeatureConfigList.endFeatureConfigList(builder);
    };
    return FeatureConfigList;
}());
exports.FeatureConfigList = FeatureConfigList;
