// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class FeatureConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FeatureConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFeatureConfig(bb:flatbuffers.ByteBuffer, obj?:FeatureConfig):FeatureConfig {
  return (obj || new FeatureConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFeatureConfig(bb:flatbuffers.ByteBuffer, obj?:FeatureConfig):FeatureConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FeatureConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

featureId():string|null
featureId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
featureId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

enable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

action():string|null
action(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
action(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

data():string|null
data(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
data(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startFeatureConfig(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addFeatureId(builder:flatbuffers.Builder, featureIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, featureIdOffset, 0);
}

static addEnable(builder:flatbuffers.Builder, enable:boolean) {
  builder.addFieldInt8(1, +enable, +false);
}

static addAction(builder:flatbuffers.Builder, actionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, actionOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, typeOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, dataOffset, 0);
}

static endFeatureConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFeatureConfig(builder:flatbuffers.Builder, featureIdOffset:flatbuffers.Offset, enable:boolean, actionOffset:flatbuffers.Offset, typeOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  FeatureConfig.startFeatureConfig(builder);
  FeatureConfig.addFeatureId(builder, featureIdOffset);
  FeatureConfig.addEnable(builder, enable);
  FeatureConfig.addAction(builder, actionOffset);
  FeatureConfig.addType(builder, typeOffset);
  FeatureConfig.addData(builder, dataOffset);
  return FeatureConfig.endFeatureConfig(builder);
}

unpack(): FeatureConfigT {
  return new FeatureConfigT(
    this.featureId(),
    this.enable(),
    this.action(),
    this.type(),
    this.data()
  );
}


unpackTo(_o: FeatureConfigT): void {
  _o.featureId = this.featureId();
  _o.enable = this.enable();
  _o.action = this.action();
  _o.type = this.type();
  _o.data = this.data();
}
}

export class FeatureConfigT {
constructor(
  public featureId: string|Uint8Array|null = null,
  public enable: boolean = false,
  public action: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public data: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const featureId = (this.featureId !== null ? builder.createString(this.featureId!) : 0);
  const action = (this.action !== null ? builder.createString(this.action!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const data = (this.data !== null ? builder.createString(this.data!) : 0);

  return FeatureConfig.createFeatureConfig(builder,
    featureId,
    this.enable,
    action,
    type,
    data
  );
}
}
