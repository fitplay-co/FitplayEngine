// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class SensorControl {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SensorControl {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensorControl(bb:flatbuffers.ByteBuffer, obj?:SensorControl):SensorControl {
  return (obj || new SensorControl()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensorControl(bb:flatbuffers.ByteBuffer, obj?:SensorControl):SensorControl {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SensorControl()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sensorType():string|null
sensorType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sensorId():string|null
sensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSensorControl(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSensorType(builder:flatbuffers.Builder, sensorTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sensorTypeOffset, 0);
}

static addSensorId(builder:flatbuffers.Builder, sensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sensorIdOffset, 0);
}

static endSensorControl(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSensorControlBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSensorControlBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createSensorControl(builder:flatbuffers.Builder, sensorTypeOffset:flatbuffers.Offset, sensorIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  SensorControl.startSensorControl(builder);
  SensorControl.addSensorType(builder, sensorTypeOffset);
  SensorControl.addSensorId(builder, sensorIdOffset);
  return SensorControl.endSensorControl(builder);
}

unpack(): SensorControlT {
  return new SensorControlT(
    this.sensorType(),
    this.sensorId()
  );
}


unpackTo(_o: SensorControlT): void {
  _o.sensorType = this.sensorType();
  _o.sensorId = this.sensorId();
}
}

export class SensorControlT {
constructor(
  public sensorType: string|Uint8Array|null = null,
  public sensorId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sensorType = (this.sensorType !== null ? builder.createString(this.sensorType!) : 0);
  const sensorId = (this.sensorId !== null ? builder.createString(this.sensorId!) : 0);

  return SensorControl.createSensorControl(builder,
    sensorType,
    sensorId
  );
}
}
