// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class SensorClient {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SensorClient {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensorClient(bb:flatbuffers.ByteBuffer, obj?:SensorClient):SensorClient {
  return (obj || new SensorClient()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensorClient(bb:flatbuffers.ByteBuffer, obj?:SensorClient):SensorClient {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SensorClient()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sensorType():string|null
sensorType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sensorId():string|null
sensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sensorInfo():string|null
sensorInfo(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorInfo(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSensorClient(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSensorType(builder:flatbuffers.Builder, sensorTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sensorTypeOffset, 0);
}

static addSensorId(builder:flatbuffers.Builder, sensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sensorIdOffset, 0);
}

static addSensorInfo(builder:flatbuffers.Builder, sensorInfoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sensorInfoOffset, 0);
}

static endSensorClient(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSensorClientBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSensorClientBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createSensorClient(builder:flatbuffers.Builder, sensorTypeOffset:flatbuffers.Offset, sensorIdOffset:flatbuffers.Offset, sensorInfoOffset:flatbuffers.Offset):flatbuffers.Offset {
  SensorClient.startSensorClient(builder);
  SensorClient.addSensorType(builder, sensorTypeOffset);
  SensorClient.addSensorId(builder, sensorIdOffset);
  SensorClient.addSensorInfo(builder, sensorInfoOffset);
  return SensorClient.endSensorClient(builder);
}

unpack(): SensorClientT {
  return new SensorClientT(
    this.sensorType(),
    this.sensorId(),
    this.sensorInfo()
  );
}


unpackTo(_o: SensorClientT): void {
  _o.sensorType = this.sensorType();
  _o.sensorId = this.sensorId();
  _o.sensorInfo = this.sensorInfo();
}
}

export class SensorClientT {
constructor(
  public sensorType: string|Uint8Array|null = null,
  public sensorId: string|Uint8Array|null = null,
  public sensorInfo: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sensorType = (this.sensorType !== null ? builder.createString(this.sensorType!) : 0);
  const sensorId = (this.sensorId !== null ? builder.createString(this.sensorId!) : 0);
  const sensorInfo = (this.sensorInfo !== null ? builder.createString(this.sensorInfo!) : 0);

  return SensorClient.createSensorClient(builder,
    sensorType,
    sensorId,
    sensorInfo
  );
}
}
