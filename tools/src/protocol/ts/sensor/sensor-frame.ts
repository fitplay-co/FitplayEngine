// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { Imu, ImuT } from '../imu-data/imu';


export class SensorFrame {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SensorFrame {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensorFrame(bb:flatbuffers.ByteBuffer, obj?:SensorFrame):SensorFrame {
  return (obj || new SensorFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensorFrame(bb:flatbuffers.ByteBuffer, obj?:SensorFrame):SensorFrame {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SensorFrame()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

sensorType():string|null
sensorType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sensorId():string|null
sensorId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

imu(obj?:Imu):Imu|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Imu()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSensorFrame(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSensorType(builder:flatbuffers.Builder, sensorTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sensorTypeOffset, 0);
}

static addSensorId(builder:flatbuffers.Builder, sensorIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sensorIdOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, versionOffset, 0);
}

static addImu(builder:flatbuffers.Builder, imuOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, imuOffset, 0);
}

static endSensorFrame(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSensorFrameBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSensorFrameBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): SensorFrameT {
  return new SensorFrameT(
    this.sensorType(),
    this.sensorId(),
    this.version(),
    (this.imu() !== null ? this.imu()!.unpack() : null)
  );
}


unpackTo(_o: SensorFrameT): void {
  _o.sensorType = this.sensorType();
  _o.sensorId = this.sensorId();
  _o.version = this.version();
  _o.imu = (this.imu() !== null ? this.imu()!.unpack() : null);
}
}

export class SensorFrameT {
constructor(
  public sensorType: string|Uint8Array|null = null,
  public sensorId: string|Uint8Array|null = null,
  public version: string|Uint8Array|null = null,
  public imu: ImuT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const sensorType = (this.sensorType !== null ? builder.createString(this.sensorType!) : 0);
  const sensorId = (this.sensorId !== null ? builder.createString(this.sensorId!) : 0);
  const version = (this.version !== null ? builder.createString(this.version!) : 0);
  const imu = (this.imu !== null ? this.imu!.pack(builder) : 0);

  SensorFrame.startSensorFrame(builder);
  SensorFrame.addSensorType(builder, sensorType);
  SensorFrame.addSensorId(builder, sensorId);
  SensorFrame.addVersion(builder, version);
  SensorFrame.addImu(builder, imu);

  return SensorFrame.endSensorFrame(builder);
}
}
