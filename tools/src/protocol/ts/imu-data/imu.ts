// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { Vec3, Vec3T } from '../imu-data/vec3';
import { Vec4, Vec4T } from '../imu-data/vec4';


export class Imu {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Imu {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsImu(bb:flatbuffers.ByteBuffer, obj?:Imu):Imu {
  return (obj || new Imu()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsImu(bb:flatbuffers.ByteBuffer, obj?:Imu):Imu {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Imu()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

deviceId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

seq():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

accelerometer(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

gyroscope(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

magnetometer(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

quaternions(obj?:Vec4):Vec4|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startImu(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addDeviceId(builder:flatbuffers.Builder, deviceId:number) {
  builder.addFieldInt16(0, deviceId, 0);
}

static addSeq(builder:flatbuffers.Builder, seq:number) {
  builder.addFieldInt32(1, seq, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(2, timestamp, BigInt('0'));
}

static addAccelerometer(builder:flatbuffers.Builder, accelerometerOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, accelerometerOffset, 0);
}

static addGyroscope(builder:flatbuffers.Builder, gyroscopeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, gyroscopeOffset, 0);
}

static addMagnetometer(builder:flatbuffers.Builder, magnetometerOffset:flatbuffers.Offset) {
  builder.addFieldStruct(5, magnetometerOffset, 0);
}

static addQuaternions(builder:flatbuffers.Builder, quaternionsOffset:flatbuffers.Offset) {
  builder.addFieldStruct(6, quaternionsOffset, 0);
}

static endImu(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishImuBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedImuBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): ImuT {
  return new ImuT(
    this.deviceId(),
    this.seq(),
    this.timestamp(),
    (this.accelerometer() !== null ? this.accelerometer()!.unpack() : null),
    (this.gyroscope() !== null ? this.gyroscope()!.unpack() : null),
    (this.magnetometer() !== null ? this.magnetometer()!.unpack() : null),
    (this.quaternions() !== null ? this.quaternions()!.unpack() : null)
  );
}


unpackTo(_o: ImuT): void {
  _o.deviceId = this.deviceId();
  _o.seq = this.seq();
  _o.timestamp = this.timestamp();
  _o.accelerometer = (this.accelerometer() !== null ? this.accelerometer()!.unpack() : null);
  _o.gyroscope = (this.gyroscope() !== null ? this.gyroscope()!.unpack() : null);
  _o.magnetometer = (this.magnetometer() !== null ? this.magnetometer()!.unpack() : null);
  _o.quaternions = (this.quaternions() !== null ? this.quaternions()!.unpack() : null);
}
}

export class ImuT {
constructor(
  public deviceId: number = 0,
  public seq: number = 0,
  public timestamp: bigint = BigInt('0'),
  public accelerometer: Vec3T|null = null,
  public gyroscope: Vec3T|null = null,
  public magnetometer: Vec3T|null = null,
  public quaternions: Vec4T|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  Imu.startImu(builder);
  Imu.addDeviceId(builder, this.deviceId);
  Imu.addSeq(builder, this.seq);
  Imu.addTimestamp(builder, this.timestamp);
  Imu.addAccelerometer(builder, (this.accelerometer !== null ? this.accelerometer!.pack(builder) : 0));
  Imu.addGyroscope(builder, (this.gyroscope !== null ? this.gyroscope!.pack(builder) : 0));
  Imu.addMagnetometer(builder, (this.magnetometer !== null ? this.magnetometer!.pack(builder) : 0));
  Imu.addQuaternions(builder, (this.quaternions !== null ? this.quaternions!.pack(builder) : 0));

  return Imu.endImu(builder);
}
}
