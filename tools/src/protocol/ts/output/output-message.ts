// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { Action, ActionT } from '../action-data/action';
import { TimeProfiling, TimeProfilingT } from '../output/time-profiling';
import { Pose, PoseT } from '../pose-data/pose';


export class OutputMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):OutputMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOutputMessage(bb:flatbuffers.ByteBuffer, obj?:OutputMessage):OutputMessage {
  return (obj || new OutputMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOutputMessage(bb:flatbuffers.ByteBuffer, obj?:OutputMessage):OutputMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OutputMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sensorType():string|null
sensorType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sensorType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

pose(obj?:Pose):Pose|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Pose()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

detectionResult(obj?:Action):Action|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Action()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

timeProfiling(obj?:TimeProfiling):TimeProfiling|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new TimeProfiling()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startOutputMessage(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionOffset, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, typeOffset, 0);
}

static addSensorType(builder:flatbuffers.Builder, sensorTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sensorTypeOffset, 0);
}

static addPose(builder:flatbuffers.Builder, poseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, poseOffset, 0);
}

static addDetectionResult(builder:flatbuffers.Builder, detectionResultOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, detectionResultOffset, 0);
}

static addTimeProfiling(builder:flatbuffers.Builder, timeProfilingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, timeProfilingOffset, 0);
}

static endOutputMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOutputMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedOutputMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): OutputMessageT {
  return new OutputMessageT(
    this.version(),
    this.type(),
    this.sensorType(),
    (this.pose() !== null ? this.pose()!.unpack() : null),
    (this.detectionResult() !== null ? this.detectionResult()!.unpack() : null),
    (this.timeProfiling() !== null ? this.timeProfiling()!.unpack() : null)
  );
}


unpackTo(_o: OutputMessageT): void {
  _o.version = this.version();
  _o.type = this.type();
  _o.sensorType = this.sensorType();
  _o.pose = (this.pose() !== null ? this.pose()!.unpack() : null);
  _o.detectionResult = (this.detectionResult() !== null ? this.detectionResult()!.unpack() : null);
  _o.timeProfiling = (this.timeProfiling() !== null ? this.timeProfiling()!.unpack() : null);
}
}

export class OutputMessageT {
constructor(
  public version: string|Uint8Array|null = null,
  public type: string|Uint8Array|null = null,
  public sensorType: string|Uint8Array|null = null,
  public pose: PoseT|null = null,
  public detectionResult: ActionT|null = null,
  public timeProfiling: TimeProfilingT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const version = (this.version !== null ? builder.createString(this.version!) : 0);
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const sensorType = (this.sensorType !== null ? builder.createString(this.sensorType!) : 0);
  const pose = (this.pose !== null ? this.pose!.pack(builder) : 0);
  const detectionResult = (this.detectionResult !== null ? this.detectionResult!.pack(builder) : 0);
  const timeProfiling = (this.timeProfiling !== null ? this.timeProfiling!.pack(builder) : 0);

  OutputMessage.startOutputMessage(builder);
  OutputMessage.addVersion(builder, version);
  OutputMessage.addType(builder, type);
  OutputMessage.addSensorType(builder, sensorType);
  OutputMessage.addPose(builder, pose);
  OutputMessage.addDetectionResult(builder, detectionResult);
  OutputMessage.addTimeProfiling(builder, timeProfiling);

  return OutputMessage.endOutputMessage(builder);
}
}
