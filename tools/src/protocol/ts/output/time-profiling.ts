// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class TimeProfiling {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):TimeProfiling {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTimeProfiling(bb:flatbuffers.ByteBuffer, obj?:TimeProfiling):TimeProfiling {
  return (obj || new TimeProfiling()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTimeProfiling(bb:flatbuffers.ByteBuffer, obj?:TimeProfiling):TimeProfiling {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TimeProfiling()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

processingTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

beforeSendTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startTimeProfiling(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addProcessingTime(builder:flatbuffers.Builder, processingTime:bigint) {
  builder.addFieldInt64(0, processingTime, BigInt('0'));
}

static addBeforeSendTime(builder:flatbuffers.Builder, beforeSendTime:bigint) {
  builder.addFieldInt64(1, beforeSendTime, BigInt('0'));
}

static endTimeProfiling(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTimeProfiling(builder:flatbuffers.Builder, processingTime:bigint, beforeSendTime:bigint):flatbuffers.Offset {
  TimeProfiling.startTimeProfiling(builder);
  TimeProfiling.addProcessingTime(builder, processingTime);
  TimeProfiling.addBeforeSendTime(builder, beforeSendTime);
  return TimeProfiling.endTimeProfiling(builder);
}

unpack(): TimeProfilingT {
  return new TimeProfilingT(
    this.processingTime(),
    this.beforeSendTime()
  );
}


unpackTo(_o: TimeProfilingT): void {
  _o.processingTime = this.processingTime();
  _o.beforeSendTime = this.beforeSendTime();
}
}

export class TimeProfilingT {
constructor(
  public processingTime: bigint = BigInt('0'),
  public beforeSendTime: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return TimeProfiling.createTimeProfiling(builder,
    this.processingTime,
    this.beforeSendTime
  );
}
}
