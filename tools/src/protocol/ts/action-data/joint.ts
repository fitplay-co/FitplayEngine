// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class Joint {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Joint {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsJoint(bb:flatbuffers.ByteBuffer, obj?:Joint):Joint {
  return (obj || new Joint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsJoint(bb:flatbuffers.ByteBuffer, obj?:Joint):Joint {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Joint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

w():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

z():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startJoint(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addW(builder:flatbuffers.Builder, w:number) {
  builder.addFieldFloat32(0, w, 0.0);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(1, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(2, y, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldFloat32(3, z, 0.0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, nameOffset, 0);
}

static endJoint(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createJoint(builder:flatbuffers.Builder, w:number, x:number, y:number, z:number, nameOffset:flatbuffers.Offset):flatbuffers.Offset {
  Joint.startJoint(builder);
  Joint.addW(builder, w);
  Joint.addX(builder, x);
  Joint.addY(builder, y);
  Joint.addZ(builder, z);
  Joint.addName(builder, nameOffset);
  return Joint.endJoint(builder);
}

unpack(): JointT {
  return new JointT(
    this.w(),
    this.x(),
    this.y(),
    this.z(),
    this.name()
  );
}


unpackTo(_o: JointT): void {
  _o.w = this.w();
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.name = this.name();
}
}

export class JointT {
constructor(
  public w: number = 0.0,
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public name: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return Joint.createJoint(builder,
    this.w,
    this.x,
    this.y,
    this.z,
    name
  );
}
}
