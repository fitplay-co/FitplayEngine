// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class Jump {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Jump {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsJump(bb:flatbuffers.ByteBuffer, obj?:Jump):Jump {
  return (obj || new Jump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsJump(bb:flatbuffers.ByteBuffer, obj?:Jump):Jump {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Jump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

onTheGround():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

velocity():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startJump(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOnTheGround(builder:flatbuffers.Builder, onTheGround:number) {
  builder.addFieldInt32(0, onTheGround, 0);
}

static addVelocity(builder:flatbuffers.Builder, velocity:number) {
  builder.addFieldFloat32(1, velocity, 0.0);
}

static endJump(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createJump(builder:flatbuffers.Builder, onTheGround:number, velocity:number):flatbuffers.Offset {
  Jump.startJump(builder);
  Jump.addOnTheGround(builder, onTheGround);
  Jump.addVelocity(builder, velocity);
  return Jump.endJump(builder);
}

unpack(): JumpT {
  return new JumpT(
    this.onTheGround(),
    this.velocity()
  );
}


unpackTo(_o: JumpT): void {
  _o.onTheGround = this.onTheGround();
  _o.velocity = this.velocity();
}
}

export class JumpT {
constructor(
  public onTheGround: number = 0,
  public velocity: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Jump.createJump(builder,
    this.onTheGround,
    this.velocity
  );
}
}
