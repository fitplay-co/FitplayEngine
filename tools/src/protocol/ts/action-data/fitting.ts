// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { FkLandmark, FkLandmarkT } from '../action-data/fk-landmark';
import { Joint, JointT } from '../action-data/joint';


export class Fitting {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Fitting {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFitting(bb:flatbuffers.ByteBuffer, obj?:Fitting):Fitting {
  return (obj || new Fitting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFitting(bb:flatbuffers.ByteBuffer, obj?:Fitting):Fitting {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Fitting()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rotation(index: number, obj?:Joint):Joint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Joint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rotationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mirrorRotation(index: number, obj?:Joint):Joint|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Joint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mirrorRotationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

localRotation(index: number, obj?:Joint):Joint|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Joint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

localRotationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mirrorLocalRotation(index: number, obj?:Joint):Joint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Joint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mirrorLocalRotationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fittedLandmarks(index: number, obj?:FkLandmark):FkLandmark|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FkLandmark()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fittedLandmarksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fittedError():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startFitting(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rotationOffset, 0);
}

static createRotationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRotationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMirrorRotation(builder:flatbuffers.Builder, mirrorRotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mirrorRotationOffset, 0);
}

static createMirrorRotationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMirrorRotationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalRotation(builder:flatbuffers.Builder, localRotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, localRotationOffset, 0);
}

static createLocalRotationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLocalRotationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMirrorLocalRotation(builder:flatbuffers.Builder, mirrorLocalRotationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, mirrorLocalRotationOffset, 0);
}

static createMirrorLocalRotationVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMirrorLocalRotationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFittedLandmarks(builder:flatbuffers.Builder, fittedLandmarksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, fittedLandmarksOffset, 0);
}

static createFittedLandmarksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFittedLandmarksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFittedError(builder:flatbuffers.Builder, fittedError:number) {
  builder.addFieldFloat32(5, fittedError, 0.0);
}

static endFitting(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFitting(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset, mirrorRotationOffset:flatbuffers.Offset, localRotationOffset:flatbuffers.Offset, mirrorLocalRotationOffset:flatbuffers.Offset, fittedLandmarksOffset:flatbuffers.Offset, fittedError:number):flatbuffers.Offset {
  Fitting.startFitting(builder);
  Fitting.addRotation(builder, rotationOffset);
  Fitting.addMirrorRotation(builder, mirrorRotationOffset);
  Fitting.addLocalRotation(builder, localRotationOffset);
  Fitting.addMirrorLocalRotation(builder, mirrorLocalRotationOffset);
  Fitting.addFittedLandmarks(builder, fittedLandmarksOffset);
  Fitting.addFittedError(builder, fittedError);
  return Fitting.endFitting(builder);
}

unpack(): FittingT {
  return new FittingT(
    this.bb!.createObjList(this.rotation.bind(this), this.rotationLength()),
    this.bb!.createObjList(this.mirrorRotation.bind(this), this.mirrorRotationLength()),
    this.bb!.createObjList(this.localRotation.bind(this), this.localRotationLength()),
    this.bb!.createObjList(this.mirrorLocalRotation.bind(this), this.mirrorLocalRotationLength()),
    this.bb!.createObjList(this.fittedLandmarks.bind(this), this.fittedLandmarksLength()),
    this.fittedError()
  );
}


unpackTo(_o: FittingT): void {
  _o.rotation = this.bb!.createObjList(this.rotation.bind(this), this.rotationLength());
  _o.mirrorRotation = this.bb!.createObjList(this.mirrorRotation.bind(this), this.mirrorRotationLength());
  _o.localRotation = this.bb!.createObjList(this.localRotation.bind(this), this.localRotationLength());
  _o.mirrorLocalRotation = this.bb!.createObjList(this.mirrorLocalRotation.bind(this), this.mirrorLocalRotationLength());
  _o.fittedLandmarks = this.bb!.createObjList(this.fittedLandmarks.bind(this), this.fittedLandmarksLength());
  _o.fittedError = this.fittedError();
}
}

export class FittingT {
constructor(
  public rotation: (JointT)[] = [],
  public mirrorRotation: (JointT)[] = [],
  public localRotation: (JointT)[] = [],
  public mirrorLocalRotation: (JointT)[] = [],
  public fittedLandmarks: (FkLandmarkT)[] = [],
  public fittedError: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const rotation = Fitting.createRotationVector(builder, builder.createObjectOffsetList(this.rotation));
  const mirrorRotation = Fitting.createMirrorRotationVector(builder, builder.createObjectOffsetList(this.mirrorRotation));
  const localRotation = Fitting.createLocalRotationVector(builder, builder.createObjectOffsetList(this.localRotation));
  const mirrorLocalRotation = Fitting.createMirrorLocalRotationVector(builder, builder.createObjectOffsetList(this.mirrorLocalRotation));
  const fittedLandmarks = Fitting.createFittedLandmarksVector(builder, builder.createObjectOffsetList(this.fittedLandmarks));

  return Fitting.createFitting(builder,
    rotation,
    mirrorRotation,
    localRotation,
    mirrorLocalRotation,
    fittedLandmarks,
    this.fittedError
  );
}
}
