// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class Walk {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Walk {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWalk(bb:flatbuffers.ByteBuffer, obj?:Walk):Walk {
  return (obj || new Walk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWalk(bb:flatbuffers.ByteBuffer, obj?:Walk):Walk {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Walk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

leftLeg():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

rightLeg():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

leftFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rightFrequency():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

leftHipAng():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rightHipAng():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

leftStepLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rightStepLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

leftProgress():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rightProgress():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

turn():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

stepRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

stepLen():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

velocity():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

velocityThreshold():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

realtimeLeftLeg():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

realtimeRightLeg():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startWalk(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addLeftLeg(builder:flatbuffers.Builder, leftLeg:number) {
  builder.addFieldInt32(0, leftLeg, 0);
}

static addRightLeg(builder:flatbuffers.Builder, rightLeg:number) {
  builder.addFieldInt32(1, rightLeg, 0);
}

static addLeftFrequency(builder:flatbuffers.Builder, leftFrequency:number) {
  builder.addFieldFloat32(2, leftFrequency, 0.0);
}

static addRightFrequency(builder:flatbuffers.Builder, rightFrequency:number) {
  builder.addFieldFloat32(3, rightFrequency, 0.0);
}

static addLeftHipAng(builder:flatbuffers.Builder, leftHipAng:number) {
  builder.addFieldFloat32(4, leftHipAng, 0.0);
}

static addRightHipAng(builder:flatbuffers.Builder, rightHipAng:number) {
  builder.addFieldFloat32(5, rightHipAng, 0.0);
}

static addLeftStepLength(builder:flatbuffers.Builder, leftStepLength:number) {
  builder.addFieldFloat32(6, leftStepLength, 0.0);
}

static addRightStepLength(builder:flatbuffers.Builder, rightStepLength:number) {
  builder.addFieldFloat32(7, rightStepLength, 0.0);
}

static addLeftProgress(builder:flatbuffers.Builder, leftProgress:number) {
  builder.addFieldFloat32(8, leftProgress, 0.0);
}

static addRightProgress(builder:flatbuffers.Builder, rightProgress:number) {
  builder.addFieldFloat32(9, rightProgress, 0.0);
}

static addTurn(builder:flatbuffers.Builder, turn:number) {
  builder.addFieldFloat32(10, turn, 0.0);
}

static addStepRate(builder:flatbuffers.Builder, stepRate:number) {
  builder.addFieldFloat32(11, stepRate, 0.0);
}

static addStepLen(builder:flatbuffers.Builder, stepLen:number) {
  builder.addFieldFloat32(12, stepLen, 0.0);
}

static addVelocity(builder:flatbuffers.Builder, velocity:number) {
  builder.addFieldFloat32(13, velocity, 0.0);
}

static addVelocityThreshold(builder:flatbuffers.Builder, velocityThreshold:number) {
  builder.addFieldFloat32(14, velocityThreshold, 0.0);
}

static addRealtimeLeftLeg(builder:flatbuffers.Builder, realtimeLeftLeg:number) {
  builder.addFieldInt32(15, realtimeLeftLeg, 0);
}

static addRealtimeRightLeg(builder:flatbuffers.Builder, realtimeRightLeg:number) {
  builder.addFieldInt32(16, realtimeRightLeg, 0);
}

static endWalk(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWalk(builder:flatbuffers.Builder, leftLeg:number, rightLeg:number, leftFrequency:number, rightFrequency:number, leftHipAng:number, rightHipAng:number, leftStepLength:number, rightStepLength:number, leftProgress:number, rightProgress:number, turn:number, stepRate:number, stepLen:number, velocity:number, velocityThreshold:number, realtimeLeftLeg:number, realtimeRightLeg:number):flatbuffers.Offset {
  Walk.startWalk(builder);
  Walk.addLeftLeg(builder, leftLeg);
  Walk.addRightLeg(builder, rightLeg);
  Walk.addLeftFrequency(builder, leftFrequency);
  Walk.addRightFrequency(builder, rightFrequency);
  Walk.addLeftHipAng(builder, leftHipAng);
  Walk.addRightHipAng(builder, rightHipAng);
  Walk.addLeftStepLength(builder, leftStepLength);
  Walk.addRightStepLength(builder, rightStepLength);
  Walk.addLeftProgress(builder, leftProgress);
  Walk.addRightProgress(builder, rightProgress);
  Walk.addTurn(builder, turn);
  Walk.addStepRate(builder, stepRate);
  Walk.addStepLen(builder, stepLen);
  Walk.addVelocity(builder, velocity);
  Walk.addVelocityThreshold(builder, velocityThreshold);
  Walk.addRealtimeLeftLeg(builder, realtimeLeftLeg);
  Walk.addRealtimeRightLeg(builder, realtimeRightLeg);
  return Walk.endWalk(builder);
}

unpack(): WalkT {
  return new WalkT(
    this.leftLeg(),
    this.rightLeg(),
    this.leftFrequency(),
    this.rightFrequency(),
    this.leftHipAng(),
    this.rightHipAng(),
    this.leftStepLength(),
    this.rightStepLength(),
    this.leftProgress(),
    this.rightProgress(),
    this.turn(),
    this.stepRate(),
    this.stepLen(),
    this.velocity(),
    this.velocityThreshold(),
    this.realtimeLeftLeg(),
    this.realtimeRightLeg()
  );
}


unpackTo(_o: WalkT): void {
  _o.leftLeg = this.leftLeg();
  _o.rightLeg = this.rightLeg();
  _o.leftFrequency = this.leftFrequency();
  _o.rightFrequency = this.rightFrequency();
  _o.leftHipAng = this.leftHipAng();
  _o.rightHipAng = this.rightHipAng();
  _o.leftStepLength = this.leftStepLength();
  _o.rightStepLength = this.rightStepLength();
  _o.leftProgress = this.leftProgress();
  _o.rightProgress = this.rightProgress();
  _o.turn = this.turn();
  _o.stepRate = this.stepRate();
  _o.stepLen = this.stepLen();
  _o.velocity = this.velocity();
  _o.velocityThreshold = this.velocityThreshold();
  _o.realtimeLeftLeg = this.realtimeLeftLeg();
  _o.realtimeRightLeg = this.realtimeRightLeg();
}
}

export class WalkT {
constructor(
  public leftLeg: number = 0,
  public rightLeg: number = 0,
  public leftFrequency: number = 0.0,
  public rightFrequency: number = 0.0,
  public leftHipAng: number = 0.0,
  public rightHipAng: number = 0.0,
  public leftStepLength: number = 0.0,
  public rightStepLength: number = 0.0,
  public leftProgress: number = 0.0,
  public rightProgress: number = 0.0,
  public turn: number = 0.0,
  public stepRate: number = 0.0,
  public stepLen: number = 0.0,
  public velocity: number = 0.0,
  public velocityThreshold: number = 0.0,
  public realtimeLeftLeg: number = 0,
  public realtimeRightLeg: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Walk.createWalk(builder,
    this.leftLeg,
    this.rightLeg,
    this.leftFrequency,
    this.rightFrequency,
    this.leftHipAng,
    this.rightHipAng,
    this.leftStepLength,
    this.rightStepLength,
    this.leftProgress,
    this.rightProgress,
    this.turn,
    this.stepRate,
    this.stepLen,
    this.velocity,
    this.velocityThreshold,
    this.realtimeLeftLeg,
    this.realtimeRightLeg
  );
}
}
