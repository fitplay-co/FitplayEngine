// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class General {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):General {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGeneral(bb:flatbuffers.ByteBuffer, obj?:General):General {
  return (obj || new General()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGeneral(bb:flatbuffers.ByteBuffer, obj?:General):General {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new General()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

confidence():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startGeneral(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addConfidence(builder:flatbuffers.Builder, confidence:number) {
  builder.addFieldFloat32(0, confidence, 0.0);
}

static endGeneral(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGeneral(builder:flatbuffers.Builder, confidence:number):flatbuffers.Offset {
  General.startGeneral(builder);
  General.addConfidence(builder, confidence);
  return General.endGeneral(builder);
}

unpack(): GeneralT {
  return new GeneralT(
    this.confidence()
  );
}


unpackTo(_o: GeneralT): void {
  _o.confidence = this.confidence();
}
}

export class GeneralT {
constructor(
  public confidence: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return General.createGeneral(builder,
    this.confidence
  );
}
}
