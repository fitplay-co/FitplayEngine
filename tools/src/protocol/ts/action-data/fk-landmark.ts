// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class FkLandmark {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):FkLandmark {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFkLandmark(bb:flatbuffers.ByteBuffer, obj?:FkLandmark):FkLandmark {
  return (obj || new FkLandmark()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFkLandmark(bb:flatbuffers.ByteBuffer, obj?:FkLandmark):FkLandmark {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FkLandmark()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

z():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startFkLandmark(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldFloat32(0, x, 0.0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldFloat32(1, y, 0.0);
}

static addZ(builder:flatbuffers.Builder, z:number) {
  builder.addFieldFloat32(2, z, 0.0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static endFkLandmark(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFkLandmark(builder:flatbuffers.Builder, x:number, y:number, z:number, nameOffset:flatbuffers.Offset):flatbuffers.Offset {
  FkLandmark.startFkLandmark(builder);
  FkLandmark.addX(builder, x);
  FkLandmark.addY(builder, y);
  FkLandmark.addZ(builder, z);
  FkLandmark.addName(builder, nameOffset);
  return FkLandmark.endFkLandmark(builder);
}

unpack(): FkLandmarkT {
  return new FkLandmarkT(
    this.x(),
    this.y(),
    this.z(),
    this.name()
  );
}


unpackTo(_o: FkLandmarkT): void {
  _o.x = this.x();
  _o.y = this.y();
  _o.z = this.z();
  _o.name = this.name();
}
}

export class FkLandmarkT {
constructor(
  public x: number = 0.0,
  public y: number = 0.0,
  public z: number = 0.0,
  public name: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return FkLandmark.createFkLandmark(builder,
    this.x,
    this.y,
    this.z,
    name
  );
}
}
