// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class Stand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Stand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStand(bb:flatbuffers.ByteBuffer, obj?:Stand):Stand {
  return (obj || new Stand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStand(bb:flatbuffers.ByteBuffer, obj?:Stand):Stand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Stand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mode():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startStand(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMode(builder:flatbuffers.Builder, mode:number) {
  builder.addFieldInt32(0, mode, 0);
}

static endStand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createStand(builder:flatbuffers.Builder, mode:number):flatbuffers.Offset {
  Stand.startStand(builder);
  Stand.addMode(builder, mode);
  return Stand.endStand(builder);
}

unpack(): StandT {
  return new StandT(
    this.mode()
  );
}


unpackTo(_o: StandT): void {
  _o.mode = this.mode();
}
}

export class StandT {
constructor(
  public mode: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Stand.createStand(builder,
    this.mode
  );
}
}
