// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { Fitting, FittingT } from '../action-data/fitting';
import { Gaze, GazeT } from '../action-data/gaze';
import { General, GeneralT } from '../action-data/general';
import { Ground, GroundT } from '../action-data/ground';
import { Jump, JumpT } from '../action-data/jump';
import { Squat, SquatT } from '../action-data/squat';
import { Stand, StandT } from '../action-data/stand';
import { Walk, WalkT } from '../action-data/walk';


export class Action {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Action {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAction(bb:flatbuffers.ByteBuffer, obj?:Action):Action {
  return (obj || new Action()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAction(bb:flatbuffers.ByteBuffer, obj?:Action):Action {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Action()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

general(obj?:General):General|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new General()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

stand(obj?:Stand):Stand|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Stand()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

walk(obj?:Walk):Walk|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Walk()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

jump(obj?:Jump):Jump|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Jump()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

gaze(obj?:Gaze):Gaze|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Gaze()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

squat(obj?:Squat):Squat|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Squat()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

ground(obj?:Ground):Ground|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Ground()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

fitting(obj?:Fitting):Fitting|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Fitting()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startAction(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addGeneral(builder:flatbuffers.Builder, generalOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, generalOffset, 0);
}

static addStand(builder:flatbuffers.Builder, standOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, standOffset, 0);
}

static addWalk(builder:flatbuffers.Builder, walkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, walkOffset, 0);
}

static addJump(builder:flatbuffers.Builder, jumpOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, jumpOffset, 0);
}

static addGaze(builder:flatbuffers.Builder, gazeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, gazeOffset, 0);
}

static addSquat(builder:flatbuffers.Builder, squatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, squatOffset, 0);
}

static addGround(builder:flatbuffers.Builder, groundOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, groundOffset, 0);
}

static addFitting(builder:flatbuffers.Builder, fittingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, fittingOffset, 0);
}

static endAction(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishActionBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedActionBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): ActionT {
  return new ActionT(
    (this.general() !== null ? this.general()!.unpack() : null),
    (this.stand() !== null ? this.stand()!.unpack() : null),
    (this.walk() !== null ? this.walk()!.unpack() : null),
    (this.jump() !== null ? this.jump()!.unpack() : null),
    (this.gaze() !== null ? this.gaze()!.unpack() : null),
    (this.squat() !== null ? this.squat()!.unpack() : null),
    (this.ground() !== null ? this.ground()!.unpack() : null),
    (this.fitting() !== null ? this.fitting()!.unpack() : null)
  );
}


unpackTo(_o: ActionT): void {
  _o.general = (this.general() !== null ? this.general()!.unpack() : null);
  _o.stand = (this.stand() !== null ? this.stand()!.unpack() : null);
  _o.walk = (this.walk() !== null ? this.walk()!.unpack() : null);
  _o.jump = (this.jump() !== null ? this.jump()!.unpack() : null);
  _o.gaze = (this.gaze() !== null ? this.gaze()!.unpack() : null);
  _o.squat = (this.squat() !== null ? this.squat()!.unpack() : null);
  _o.ground = (this.ground() !== null ? this.ground()!.unpack() : null);
  _o.fitting = (this.fitting() !== null ? this.fitting()!.unpack() : null);
}
}

export class ActionT {
constructor(
  public general: GeneralT|null = null,
  public stand: StandT|null = null,
  public walk: WalkT|null = null,
  public jump: JumpT|null = null,
  public gaze: GazeT|null = null,
  public squat: SquatT|null = null,
  public ground: GroundT|null = null,
  public fitting: FittingT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const general = (this.general !== null ? this.general!.pack(builder) : 0);
  const stand = (this.stand !== null ? this.stand!.pack(builder) : 0);
  const walk = (this.walk !== null ? this.walk!.pack(builder) : 0);
  const jump = (this.jump !== null ? this.jump!.pack(builder) : 0);
  const gaze = (this.gaze !== null ? this.gaze!.pack(builder) : 0);
  const squat = (this.squat !== null ? this.squat!.pack(builder) : 0);
  const ground = (this.ground !== null ? this.ground!.pack(builder) : 0);
  const fitting = (this.fitting !== null ? this.fitting!.pack(builder) : 0);

  Action.startAction(builder);
  Action.addGeneral(builder, general);
  Action.addStand(builder, stand);
  Action.addWalk(builder, walk);
  Action.addJump(builder, jump);
  Action.addGaze(builder, gaze);
  Action.addSquat(builder, squat);
  Action.addGround(builder, ground);
  Action.addFitting(builder, fitting);

  return Action.endAction(builder);
}
}
