// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';



export class ControlData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ControlData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsControlData(bb:flatbuffers.ByteBuffer, obj?:ControlData):ControlData {
  return (obj || new ControlData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsControlData(bb:flatbuffers.ByteBuffer, obj?:ControlData):ControlData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ControlData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fps():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startControlData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt32(0, fps, 0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldFloat32(1, height, 0.0);
}

static endControlData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createControlData(builder:flatbuffers.Builder, fps:number, height:number):flatbuffers.Offset {
  ControlData.startControlData(builder);
  ControlData.addFps(builder, fps);
  ControlData.addHeight(builder, height);
  return ControlData.endControlData(builder);
}

unpack(): ControlDataT {
  return new ControlDataT(
    this.fps(),
    this.height()
  );
}


unpackTo(_o: ControlDataT): void {
  _o.fps = this.fps();
  _o.height = this.height();
}
}

export class ControlDataT {
constructor(
  public fps: number = 0,
  public height: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ControlData.createControlData(builder,
    this.fps,
    this.height
  );
}
}
