// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { ControlData, ControlDataT } from '../application-control/control-data';


export class Control {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Control {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsControl(bb:flatbuffers.ByteBuffer, obj?:Control):Control {
  return (obj || new Control()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsControl(bb:flatbuffers.ByteBuffer, obj?:Control):Control {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Control()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

featureId():string|null
featureId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
featureId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

action():string|null
action(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
action(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

data(obj?:ControlData):ControlData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ControlData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startControl(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFeatureId(builder:flatbuffers.Builder, featureIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, featureIdOffset, 0);
}

static addAction(builder:flatbuffers.Builder, actionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, actionOffset, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataOffset, 0);
}

static endControl(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishControlBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedControlBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): ControlT {
  return new ControlT(
    this.featureId(),
    this.action(),
    (this.data() !== null ? this.data()!.unpack() : null)
  );
}


unpackTo(_o: ControlT): void {
  _o.featureId = this.featureId();
  _o.action = this.action();
  _o.data = (this.data() !== null ? this.data()!.unpack() : null);
}
}

export class ControlT {
constructor(
  public featureId: string|Uint8Array|null = null,
  public action: string|Uint8Array|null = null,
  public data: ControlDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const featureId = (this.featureId !== null ? builder.createString(this.featureId!) : 0);
  const action = (this.action !== null ? builder.createString(this.action!) : 0);
  const data = (this.data !== null ? this.data!.pack(builder) : 0);

  Control.startControl(builder);
  Control.addFeatureId(builder, featureId);
  Control.addAction(builder, action);
  Control.addData(builder, data);

  return Control.endControl(builder);
}
}
