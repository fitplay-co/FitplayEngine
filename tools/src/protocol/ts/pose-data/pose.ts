// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { Point, PointT } from '../pose-data/point';


export class Pose {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Pose {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPose(bb:flatbuffers.ByteBuffer, obj?:Pose):Pose {
  return (obj || new Pose()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPose(bb:flatbuffers.ByteBuffer, obj?:Pose):Pose {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Pose()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

action():string|null
action(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
action(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

rgbdEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

keypoints(index: number, obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

keypointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

keypoints3D(index: number, obj?:Point):Point|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Point()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

keypoints3DLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPose(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addAction(builder:flatbuffers.Builder, actionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, actionOffset, 0);
}

static addRgbdEnabled(builder:flatbuffers.Builder, rgbdEnabled:boolean) {
  builder.addFieldInt8(1, +rgbdEnabled, +false);
}

static addKeypoints(builder:flatbuffers.Builder, keypointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, keypointsOffset, 0);
}

static createKeypointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeypointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addKeypoints3D(builder:flatbuffers.Builder, keypoints3DOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, keypoints3DOffset, 0);
}

static createKeypoints3DVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startKeypoints3DVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPose(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishPoseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedPoseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createPose(builder:flatbuffers.Builder, actionOffset:flatbuffers.Offset, rgbdEnabled:boolean, keypointsOffset:flatbuffers.Offset, keypoints3DOffset:flatbuffers.Offset):flatbuffers.Offset {
  Pose.startPose(builder);
  Pose.addAction(builder, actionOffset);
  Pose.addRgbdEnabled(builder, rgbdEnabled);
  Pose.addKeypoints(builder, keypointsOffset);
  Pose.addKeypoints3D(builder, keypoints3DOffset);
  return Pose.endPose(builder);
}

unpack(): PoseT {
  return new PoseT(
    this.action(),
    this.rgbdEnabled(),
    this.bb!.createObjList(this.keypoints.bind(this), this.keypointsLength()),
    this.bb!.createObjList(this.keypoints3D.bind(this), this.keypoints3DLength())
  );
}


unpackTo(_o: PoseT): void {
  _o.action = this.action();
  _o.rgbdEnabled = this.rgbdEnabled();
  _o.keypoints = this.bb!.createObjList(this.keypoints.bind(this), this.keypointsLength());
  _o.keypoints3D = this.bb!.createObjList(this.keypoints3D.bind(this), this.keypoints3DLength());
}
}

export class PoseT {
constructor(
  public action: string|Uint8Array|null = null,
  public rgbdEnabled: boolean = false,
  public keypoints: (PointT)[] = [],
  public keypoints3D: (PointT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const action = (this.action !== null ? builder.createString(this.action!) : 0);
  const keypoints = Pose.createKeypointsVector(builder, builder.createObjectOffsetList(this.keypoints));
  const keypoints3D = Pose.createKeypoints3DVector(builder, builder.createObjectOffsetList(this.keypoints3D));

  return Pose.createPose(builder,
    action,
    this.rgbdEnabled,
    keypoints,
    keypoints3D
  );
}
}
