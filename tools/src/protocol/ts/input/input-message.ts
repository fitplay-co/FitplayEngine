// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from '../flatbuffers/flatbuffers';

import { Client, ClientT } from '../application-client/client';
import { Control, ControlT } from '../application-control/control';
import { MessageType } from '../input/message-type';
import { Pose, PoseT } from '../pose-data/pose';
import { SensorClient, SensorClientT } from '../sensor/sensor-client';
import { SensorControl, SensorControlT } from '../sensor/sensor-control';
import { SensorFrame, SensorFrameT } from '../sensor/sensor-frame';


export class InputMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):InputMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInputMessage(bb:flatbuffers.ByteBuffer, obj?:InputMessage):InputMessage {
  return (obj || new InputMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInputMessage(bb:flatbuffers.ByteBuffer, obj?:InputMessage):InputMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InputMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

version():string|null
version(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
version(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():MessageType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : MessageType.None;
}

client(obj?:Client):Client|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Client()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

control(obj?:Control):Control|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Control()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

pose(obj?:Pose):Pose|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Pose()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

sensorFrame(obj?:SensorFrame):SensorFrame|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new SensorFrame()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

sensorClient(obj?:SensorClient):SensorClient|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new SensorClient()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

sensorControl(obj?:SensorControl):SensorControl|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new SensorControl()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startInputMessage(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addVersion(builder:flatbuffers.Builder, versionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, versionOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:MessageType) {
  builder.addFieldInt16(1, type, MessageType.None);
}

static addClient(builder:flatbuffers.Builder, clientOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, clientOffset, 0);
}

static addControl(builder:flatbuffers.Builder, controlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, controlOffset, 0);
}

static addPose(builder:flatbuffers.Builder, poseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, poseOffset, 0);
}

static addSensorFrame(builder:flatbuffers.Builder, sensorFrameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, sensorFrameOffset, 0);
}

static addSensorClient(builder:flatbuffers.Builder, sensorClientOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sensorClientOffset, 0);
}

static addSensorControl(builder:flatbuffers.Builder, sensorControlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, sensorControlOffset, 0);
}

static endInputMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishInputMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedInputMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): InputMessageT {
  return new InputMessageT(
    this.version(),
    this.type(),
    (this.client() !== null ? this.client()!.unpack() : null),
    (this.control() !== null ? this.control()!.unpack() : null),
    (this.pose() !== null ? this.pose()!.unpack() : null),
    (this.sensorFrame() !== null ? this.sensorFrame()!.unpack() : null),
    (this.sensorClient() !== null ? this.sensorClient()!.unpack() : null),
    (this.sensorControl() !== null ? this.sensorControl()!.unpack() : null)
  );
}


unpackTo(_o: InputMessageT): void {
  _o.version = this.version();
  _o.type = this.type();
  _o.client = (this.client() !== null ? this.client()!.unpack() : null);
  _o.control = (this.control() !== null ? this.control()!.unpack() : null);
  _o.pose = (this.pose() !== null ? this.pose()!.unpack() : null);
  _o.sensorFrame = (this.sensorFrame() !== null ? this.sensorFrame()!.unpack() : null);
  _o.sensorClient = (this.sensorClient() !== null ? this.sensorClient()!.unpack() : null);
  _o.sensorControl = (this.sensorControl() !== null ? this.sensorControl()!.unpack() : null);
}
}

export class InputMessageT {
constructor(
  public version: string|Uint8Array|null = null,
  public type: MessageType = MessageType.None,
  public client: ClientT|null = null,
  public control: ControlT|null = null,
  public pose: PoseT|null = null,
  public sensorFrame: SensorFrameT|null = null,
  public sensorClient: SensorClientT|null = null,
  public sensorControl: SensorControlT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const version = (this.version !== null ? builder.createString(this.version!) : 0);
  const client = (this.client !== null ? this.client!.pack(builder) : 0);
  const control = (this.control !== null ? this.control!.pack(builder) : 0);
  const pose = (this.pose !== null ? this.pose!.pack(builder) : 0);
  const sensorFrame = (this.sensorFrame !== null ? this.sensorFrame!.pack(builder) : 0);
  const sensorClient = (this.sensorClient !== null ? this.sensorClient!.pack(builder) : 0);
  const sensorControl = (this.sensorControl !== null ? this.sensorControl!.pack(builder) : 0);

  InputMessage.startInputMessage(builder);
  InputMessage.addVersion(builder, version);
  InputMessage.addType(builder, this.type);
  InputMessage.addClient(builder, client);
  InputMessage.addControl(builder, control);
  InputMessage.addPose(builder, pose);
  InputMessage.addSensorFrame(builder, sensorFrame);
  InputMessage.addSensorClient(builder, sensorClient);
  InputMessage.addSensorControl(builder, sensorControl);

  return InputMessage.endInputMessage(builder);
}
}
