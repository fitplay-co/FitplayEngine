"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Point = void 0;
var flatbuffers = require("flatbuffers");
var Point = /** @class */ (function () {
    function Point() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Point.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Point.getRootAsPoint = function (bb, obj) {
        return (obj || new Point()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Point.getSizePrefixedRootAsPoint = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Point()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Point.prototype.x = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Point.prototype.mutate_x = function (value) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    };
    Point.prototype.y = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Point.prototype.mutate_y = function (value) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    };
    Point.prototype.z = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Point.prototype.mutate_z = function (value) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    };
    Point.prototype.score = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    Point.prototype.mutate_score = function (value) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    };
    Point.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Point.startPoint = function (builder) {
        builder.startObject(5);
    };
    Point.addX = function (builder, x) {
        builder.addFieldFloat32(0, x, 0.0);
    };
    Point.addY = function (builder, y) {
        builder.addFieldFloat32(1, y, 0.0);
    };
    Point.addZ = function (builder, z) {
        builder.addFieldFloat32(2, z, 0.0);
    };
    Point.addScore = function (builder, score) {
        builder.addFieldFloat32(3, score, 0.0);
    };
    Point.addName = function (builder, nameOffset) {
        builder.addFieldOffset(4, nameOffset, 0);
    };
    Point.endPoint = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Point.createPoint = function (builder, x, y, z, score, nameOffset) {
        Point.startPoint(builder);
        Point.addX(builder, x);
        Point.addY(builder, y);
        Point.addZ(builder, z);
        Point.addScore(builder, score);
        Point.addName(builder, nameOffset);
        return Point.endPoint(builder);
    };
    return Point;
}());
exports.Point = Point;
